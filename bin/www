#!/usr/bin/env node

/**
 * Module dependencies.
 */



var app = require('../app').app;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Listen on provided port, on all network interfaces.
 */

var server = require('../app').server;
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
}

/**
 * Socket.io
 */

//sound player
var Sound = require('node-aplay');

var io = require('../app').io;

io.on('connection', function(socket) {

    console.log('User connected');
    //socket.emit('message', 'Hello, user!');
    socket.on('EnjoyView', function () {
    //socket.on('disconnect', function() {
      //console.log("User disconnected");
      //sound player
      new Sound('Figaro.wma').play();
      console.log('looking around');
    });


    socket.on('Watchout', function () {
    //socket.on('disconnect', function() {
      //console.log("User disconnected");
      //sound player
      new Sound('tension.wav').play();
      console.log('crossing');
    });
});